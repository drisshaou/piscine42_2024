#include <stdio.h>

#define SIZE 9

int is_valid(int board[SIZE][SIZE], int row, int col, int value) {
    // Vérifie si la valeur peut être placée dans la case spécifiée sans violer les règles du jeu
    for (int i = 0; i < SIZE; ++i) {
        if (board[row][i] == value || board[i][col] == value) {
            return 0;
        }
    }
    return 1;
}

int solve_skyscrapers(int board[SIZE][SIZE], int row, int col) {
    if (row == SIZE) {
        // La solution a été trouvée
        return 1;
    }

    int next_row = col == SIZE - 1 ? row + 1 : row;
    int next_col = (col + 1) % SIZE;

    if (board[row][col] != 0) {
        // La case est déjà remplie, passer à la suivante
        return solve_skyscrapers(board, next_row, next_col);
    }

    for (int value = 1; value <= SIZE; ++value) {
        if (is_valid(board, row, col, value)) {
            board[row][col] = value;

            if (solve_skyscrapers(board, next_row, next_col)) {
                return 1; // Solution trouvée
            }

            // Si la valeur ne mène pas à une solution, annuler et essayer une autre valeur
            board[row][col] = 0;
        }
    }

    return 0; // Aucune solution trouvée pour cette configuration
}

void print_skyscrapers(int board[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; ++i) {
        for (int j = 0; j < SIZE; ++j) {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int board[SIZE][SIZE] = {{0}};

    if (solve_skyscrapers(board, 0, 0)) {
        printf("Solution trouvée :\n");
        print_skyscrapers(board);
    } else {
        printf("Aucune solution trouvée.\n");
    }

    return 0;
}