#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>

void    print_error()
{
	write(1, "Error", 5);
	write(1, "\n", 1);
}

void	free_tab(char **tab) {
	int	i;

	i = -1;
	while (tab[++i] != 0)
		free(tab[i]);
	free(tab);
}

void	free_sides(char * clup, char * cldown, char *rwleft, char *rwright)
{
	free(clup);
	free(cldown);
	free(rwleft);
	free(rwright);
}

int	is_arg_valid(char *str) {
	int	i;
	int	count;

	count = 0;
	i = 0;
	while (str[i] != '\0')
		i++;
	if (i != 31)
		return (0);
	i = 0;
	while (*str != '\0')
	{
		if (*str != '\0' && *str == ' ')
			str++;
		count++;
		if (*str != '\0' && *str >= '1' && *str <= '4')
			str++;
	}
	printf("count = %d\n", count);
	if (count == 16)
		return (1);
	return (0);
}

int	is_parse_valid(char *side1, char *side2)
{
	int	i;
	int	cumul;

	i = 0;
	while (side1[i] != '\0')
	{
		cumul = side1[i] - 48 + side2[i] - 48;
		if (!(cumul >= 3 && cumul <= 5))
			return (0);
		i++;
	}
	return (1);
}

void	parse_arg(char *s, char *side1, char* side2) {
	int	i;
	int	index;
	
	i = 0;
	index = 0;
	while (s[i] != '\0' ) {
                while (s[i] != '\0' && s[i] == ' ')
                        i++;
		if (i < 7)
			side1[index] = s[i];
		else if (i < 15)
			side2[index] = s[i];

                while (s[i] != '\0' && s[i] >= '1' && s[i] <= '4')
                        i++;
		index++;
		if (i == 7 || i == 15)
			index = 0;
	}
}

void	show_tab(char **tab)
{
	int	row;
	int	col;
	char	_char;

	row = 0;
	while (tab[row] != 0) {
		col = 0;
		//while (tab[row][col] != '\0') {
		while (col < 4) {
			_char = tab[row][col] + 48;
			write(1, &_char, 1);
			write(1, " ", 1);
			col++;
		}
		write(1, "\n", 1);
		row++;
	}
}
int	main(int ac, char **av) {
	(void)av;
	if (ac == 2) {
        	char    **tab;
        	int	    row;
        	int	    col;
		char	*colup;
		char    *coldown;
		char    *rowleft;
		char    *rowright;

		//printf("%d\n", is_arg_valid(av[1]));
		//return (1);

		if (!is_arg_valid(av[1]))
		{
			print_error();
			return (0);
		}
		colup = (char*)malloc(sizeof(char) * (4 + 1));
		coldown = (char*)malloc(sizeof(char) * (4 + 1));
		rowleft = (char*)malloc(sizeof(char) * (4 + 1));
		rowright = (char*)malloc(sizeof(char) * (4 + 1));

		parse_arg(av[1], colup, coldown);
		parse_arg(av[1] + 16, rowleft, rowright);
		//printf("colup %s\n", colup);
		//printf("coldown %s\n", coldown);
		//printf("rowleft %s\n", rowleft);
		//printf("rowright %s\n", rowright);
		//return (0);
		if (!is_parse_valid(colup, coldown)
				|| !is_parse_valid(rowleft, rowright))
		{
			free_sides(colup, coldown, rowleft, rowright);
                        print_error();
                        return (0);
		}
		if (!(tab = (char**)malloc(sizeof(char*) * (4 + 1))))
		{
			print_error();
			return (0);
		}
		//tab[4] = 0;
		row = 0;
		while (row < 4) {
		//	if (!(tab[row] = (char*)malloc(sizeof(char) * (4 + 1))))
		//	{
		//		print_error();
		//		free_tab(tab);
		//		free_sides(colup, coldown, rowleft, rowright);
		//	}
			tab[row] = (char*)malloc(sizeof(char) * (4 + 1));
			row++;
		}
		tab[row] = 0;
	//	printf("row = %d\n", row);
		row = 0;
		while (tab[row] != 0) {
			col = 0;
			while (col < 4) {
				tab[row][col] = 0;
			//	printf("tab[%d][%d]=%c\n", row, col, tab[row][col] + 48);
				col++;

			}
			tab[row][col] = '\0';
			row++;
		}
		show_tab(tab);
		free_tab(tab);	
		free_sides(colup, coldown, rowleft, rowright);
	}
	else
		print_error();

	return (0);
}
